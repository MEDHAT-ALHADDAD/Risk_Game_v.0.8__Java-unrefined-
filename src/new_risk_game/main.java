package new_risk_game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Medhat
 */
 class Start extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame1
     */
    public Start() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        halloffame = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        Start = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(350, 100));
        setName("START"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        halloffame.setText("Hall of Fame");
        halloffame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halloffameActionPerformed(evt);
            }
        });
        jPanel1.add(halloffame);
        halloffame.setBounds(230, 280, 213, 46);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jPanel1.add(exit);
        exit.setBounds(230, 380, 213, 46);

        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });
        jPanel1.add(Start);
        Start.setBounds(230, 194, 213, 46);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/risk-1.jpg"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
    }// </editor-fold>                        

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {                                      
         int x=-1;
         while(x<2||x>5){
               x  = Integer.parseInt(JOptionPane.showInputDialog(rootPane, "please enter number of player(2-5)"));
         }
       Game_frame f1=new Game_frame(x);
        f1.setVisible(true);
        this.dispose();
    }                                     

    private void halloffameActionPerformed(java.awt.event.ActionEvent evt) {                                           
       try{
        FileReader r=new FileReader("fame.txt");
        BufferedReader br=new BufferedReader(r);
        JFrame f=new JFrame("Hall of Fame");
        f.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        f.setLayout(new GridLayout(0,1));
        f.setSize(500, 500);
        f.setLocation(400, 30);
        f.setBackground(Color.yellow);
        //ArrayList<JLabel> lbls=new ArrayList();
        int i=0;
        while(br.ready()){
            i++;
            JLabel l=new JLabel();
            l.setText(i+": "+br.readLine());
            f.add(l);
        }
        if(i==0){
            JLabel l=new JLabel("No History is Found");
            f.add(l);
        }
        r.close();
        br.close();
        f.setVisible(true);
       }catch(Exception e){
           System.out.println("file not found");
       }         
    }                                          

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {                                     
         System.exit(0);
    }                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Start().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Start;
    private javax.swing.JButton exit;
    private javax.swing.JButton halloffame;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration                   
}


class intro extends javax.swing.JFrame{
    private JLabel introlbl = new javax.swing.JLabel();

    public intro()  {
         setTitle("INTRO");
        setAlwaysOnTop(true);
       // setBounds(new java.awt.Rectangle(Toolkit.getDefaultToolkit().getScreenSize().width,Toolkit.getDefaultToolkit().getScreenSize().height));
       // setMaximumSize(new java.awt.Dimension(Toolkit.getDefaultToolkit().getScreenSize().width,Toolkit.getDefaultToolkit().getScreenSize().height));
        //setMinimumSize(new java.awt.Dimension(Toolkit.getDefaultToolkit().getScreenSize().width,Toolkit.getDefaultToolkit().getScreenSize().height));
        setName("INTRO"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(null);

        introlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Icon.jpg")));
        getContentPane().add(introlbl);
        introlbl.setBounds(70, 0, Toolkit.getDefaultToolkit().getScreenSize().width,Toolkit.getDefaultToolkit().getScreenSize().height);
    }
}
    class intro2 extends javax.swing.JFrame{
      private JLabel  jLabel1 = new javax.swing.JLabel();
     public intro2()  {
         setTitle("INTRO2");
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 1360, 720));
        setMaximumSize(new java.awt.Dimension(1360, 720));
        setMinimumSize(new java.awt.Dimension(1360, 720));
        setPreferredSize(new java.awt.Dimension(1360, 720));
        getContentPane().setLayout(new java.awt.FlowLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/15112-1920x1080.jpg"))); 
        jLabel1.setMaximumSize(new java.awt.Dimension(1360, 720));
        jLabel1.setMinimumSize(new java.awt.Dimension(1360, 720));
        jLabel1.setPreferredSize(new java.awt.Dimension(1360, 720));
        getContentPane().add(jLabel1);
    }
}










 class Game_frame extends javax.swing.JFrame{

    /**
     * Creates new form Game_frame
     */
     private  int phase=0;
     private  int round=0;
     private int zero_round=0;
     private int player_number=0;
     private int player_remaining;
    
    private int Adice1,Adice2,Adice3,Ddice1,Ddice2;
    private int dep_scrl_value=0;
    private int att_scrl_value=0;
    private int ren_scrl_value=0;
    
    private  String target1="..",target2="..";
    private  Country select1,select2;
    private Player current,defending;
    private boolean renforcment_counter=false;
    
    private final ArrayList<Player> players =new ArrayList();
    private final ArrayList<Country> countries=new ArrayList();
    
    private int[] collected;
    //private  int playernumber;
   // private static int counter;
    //private int numofsold;
    Scanner sc=new Scanner(System.in);
    
    public Game_frame(int x) {

        initComponents();
        this.player_number=x;
        init(x);
    }
    public final void init(int n){
        this.player_remaining=n;
        makeCountries();
         deploymentpnl.setVisible(true);
         attackingpnl.setVisible(false);
         renforcmentpnl.setVisible(false);
         shuffle();
        for(int i=0;i<n;i++){
            Color c=Color.WHITE;
            switch (i){
                case 0:
                     c=Color.RED;
                    break;
                case 1:
                     c=Color.green;
                    break;
                case 2:
                     c=Color.BLACK;
                    break;
                case 3:
                     c=Color.blue;
                    break;
                case 4:
                     c=Color.MAGENTA;
                    break; 
 
            }
            String s=JOptionPane.showInputDialog(rootPane, "enter "+(i+1)+" player name");
            Player p=new Player(s,c);
            if(i==n-1){
                for(int ias=(int)((i)*(Math.ceil((42.0/n*1.0))));ias<this.countries.size();ias++)
                {
                   Country con=(Country)countries.get(this.collected[ias]);
                   p.addCountry(con);
                   con.setOwner(p);
                   con.setColor(p.getColor());
               }
            }
            else{
                for(int ias=(int)(i*(Math.ceil((42.0/n*1.0))));ias<(int)((i+1)*(Math.ceil((42.0/n*1.0))));ias++)
                {
                    Country con=this.countries.get(this.collected[ias]);
                    p.addCountry(con);
                    con.setOwner(p);
                    con.setColor(p.getColor());
                }
            }
            MissionCard card=new MissionCard(p);
            switch (n){
                case 2:
                    p.addSoldier(40);
                    break;
                case 3:
                    p.addSoldier(35);
                    break;
                case 4:
                    p.addSoldier(30);
                    break;
                case 5:
                    p.addSoldier(25);
                    break;
                case 6:
                    p.addSoldier(20);
                    break;
            }
            players.add(p);
        }
        this.msglbl.setText("It is "+players.get(0).getName()+"\n"+":first deployment Round." );
        this.msglbl.setForeground(players.get(0).getColor());
        this.current=players.get(0);
        deploy();
    }
    public void makeCountries(){
        
      Tile alaska=new Tile();
      alaska.setName("ALASKA");
      Country c=new Country(alaska, ALASKABTN, ALASKA, ALASKA_SERAIL);
      countries.add(c);
        
      Tile alberta=new Tile();
      alberta.setName("ALBERTA");
      c=new Country(alberta, ALBERTABTN, Alberta, ALBETRA_SERIAL);
      countries.add(c);
        
      Tile afganistan=new Tile();
      afganistan.setName("AFGHANISTAN");
       c=new Country(afganistan, Afganistanbtn, Afganistan, Afganistanserial);
      countries.add(c);
        
      Tile argentina=new Tile();
      argentina.setName("ARGENTINA");
       c=new Country(argentina, Argentinabtn, Argentina, Argentinaserial);
      countries.add(c);
        
      Tile brazil=new Tile();
      brazil.setName("BRAZIL");
       c=new Country(brazil, Brazilbtn, Brazil, Brazilserial);
      countries.add(c);
        
      Tile centralamerica=new Tile();
      centralamerica.setName("CENTRALAMERICA");
       c=new Country(centralamerica, CentralAmericabtn, CentralAmerica, CentralAmericaSerial);
      countries.add(c);
        
      Tile china=new Tile();
      china.setName("CHINA");
       c=new Country(china, Chinabtn, China, Chinaserial);
      countries.add(c);
        
      Tile eastafrica=new Tile();
      eastafrica.setName("EASTAFRICA");
       c=new Country(eastafrica, EastAfricabtn, EastAfrica, EastAfricaserial);
      countries.add(c);
        
      Tile easternaustralia=new Tile();
      easternaustralia.setName("EASTERNAUSTRALIA");
       c=new Country(easternaustralia, EasternAustraliabtn, EasternAustralia, EasternAustraliaserial);
      countries.add(c);
        
      Tile easternus=new Tile();
      easternus.setName("EASTERNUS");
       c=new Country(easternus, EasternUSbtn, EasternUS, EasternUSserial);
      countries.add(c);
        
      Tile egypt=new Tile();
      egypt.setName("EGYPT");
       c=new Country(egypt, Egyptbtn, Egypt, Egyptserial);
      countries.add(c);
        
      Tile greatbritain=new Tile();
      greatbritain.setName("GREATBRITAIN");
       c=new Country(greatbritain, GreatBritainbtn, GreatBritain, GreatBritainserial);
      countries.add(c);
        
      Tile greenland=new Tile();
      greenland.setName("GREENLAND");
       c=new Country(greenland, Greenlandbtn, Greenland, Greenland_serial);
      countries.add(c);
        
      Tile iceland=new Tile();
      iceland.setName("ICELAND");
       c=new Country(iceland, Icelandbtn, Iceland, Icelandserial);
      countries.add(c);
        
      Tile india=new Tile();
      india.setName("INDIA");
       c=new Country(india, Indiabtn, India, Indiaserial);
      countries.add(c);
        
      Tile indonesia=new Tile();
      indonesia.setName("INDONESIA");
       c=new Country(indonesia, Indonesiabtn, Indonesia, Indonesiaserial);
      countries.add(c);
        
      Tile irkutsk=new Tile();
      irkutsk.setName("IRKUTSK");
       c=new Country(irkutsk, Irkutskbtn, Irkutsk, Irkutskserial);
      countries.add(c);
        
      Tile japan=new Tile();
      japan.setName("JAPAN");
       c=new Country(japan, Japanbtn, Japan, Japanserial);
      countries.add(c);
        
      Tile kamchatka=new Tile();
      kamchatka.setName("KAMCHATKA");
       c=new Country(kamchatka, Kamchatkabtn, Kamchatka, Kamchatkaserial);
      countries.add(c);
        
      Tile madagascer=new Tile();
      madagascer.setName("MADAGASCAR");
       c=new Country(madagascer, Madagascerbtn, Madagascer, Madagascerserial);
      countries.add(c);
        
      Tile middleeast=new Tile();
      middleeast.setName("MIDDLEEAST");
       c=new Country(middleeast, MiddleEastbtn, MiddleEast, MiddleEastserial);
      countries.add(c);
        
      Tile mongolia=new Tile();
      mongolia.setName("MONGOLIA");
       c=new Country(mongolia, Mongoliabtn, Mongolia, Mongoliaserial);
      countries.add(c);
        
      Tile northwest=new Tile();
      northwest.setName("NWTERRITORY");
       c=new Country(northwest, NORTHWEST_BTN, NORTHWEST, NORTHWEST_SERIAL);
      countries.add(c);
        
      Tile newguinea=new Tile();
      newguinea.setName("NEWGUINEA");
       c=new Country(newguinea, NewGuineabtn, NewGuinea, NewGuineaserial);
      countries.add(c);
        
      Tile northafrica=new Tile();
      northafrica.setName("NORTHAFRICA");
       c=new Country(northafrica, NorthAfricabtn, NorthAfrica, NorthAfricaserial);
      countries.add(c);
        
      Tile northerneurope=new Tile();
      northerneurope.setName("NORTHERNEUROPE");
       c=new Country(northerneurope, NorthernEuropebtn, NorthernEurope, NorthernEuropeserial);
      countries.add(c);
        
      Tile ontario=new Tile();
      ontario.setName("ONTARIO");
       c=new Country(ontario, Ontariobtn, Ontario, Ontarioserial);
      countries.add(c);
        
      Tile peru=new Tile();
      peru.setName("PERU");
       c=new Country(peru, Perubtn, Peru, Peruserial);
      countries.add(c);
        
      Tile quebec=new Tile();
      quebec.setName("QUEBEC");
       c=new Country(quebec, Quebecbtn, Quebec, Quebecserial);
      countries.add(c);
        
      Tile siberia=new Tile();
      siberia.setName("SIBERIA");
       c=new Country(siberia, Siberiabtn, SIBERIA, SIBERIA_SERIAL);
      countries.add(c);
        
      Tile scandinavia=new Tile();
      scandinavia.setName("SCANDINAVIA");
       c=new Country(scandinavia, Scandinaviabtn, Scandinavia, Scandinaviaserial);
      countries.add(c);
        
      Tile siam=new Tile();
      siam.setName("SIAM");
       c=new Country(siam, Siambtn, Siam, Siamserial);
      countries.add(c);
        
      Tile southafrica=new Tile();
      southafrica.setName("SOUTHAFRICA");
       c=new Country(southafrica, SouthAfricabtn, SouthAfrica, SouthAfricaserial);
      countries.add(c);
        
      Tile southerneurope=new Tile();
      southerneurope.setName("SOUTHERNEUROPE");
       c=new Country(southerneurope, SouthernEuropebtn, SouthernEurope, SouthernEuropeserial);
      countries.add(c);
        
      Tile ukraine=new Tile();
      ukraine.setName("UKRAINE");
       c=new Country(ukraine, Ukrainebtn, Ukraine, Ukraineserial);
      countries.add(c);
        
      Tile ural=new Tile();
      ural.setName("URAL");
       c=new Country(ural, Uralbtn, Ural, Uralserial);
      countries.add(c);
        
      Tile venezuela=new Tile();
      venezuela.setName("VENEZUELA");
       c=new Country(venezuela, Venezuelabtn, Venezuela, Venezuelaserial);
      countries.add(c);
        
      Tile westerneurope=new Tile();
      westerneurope.setName("WESTERNEUROPE");
       c=new Country(westerneurope, WesternEuropebtn, WesternEurope, WesternEuropeserial);
      countries.add(c);
        
      Tile westernus=new Tile();
      westernus.setName("WESTERNUS");
       c=new Country(westernus, WesternUSbtn, WesternUS, WesternUS_serial);
      countries.add(c);
        
      Tile westrenaustralia=new Tile();
      westrenaustralia.setName("WESTERNAUSTRALIA");
       c=new Country(westrenaustralia, WestrenAustraliabtn, WestrenAustralia, WestrenAustraliaserial);
      countries.add(c);
        
      Tile yakutsk=new Tile();
      yakutsk.setName("YAKUTSK");
       c=new Country(yakutsk, Yakutskbtn, YAKUTSK, YAKUTSK_SERIAL);
      countries.add(c);
        
      Tile Congo=new Tile();
      Congo.setName("CONGO");
       c=new Country(Congo, congobtn, congo, congoserial);
      countries.add(c);
      
      
    }
    private void shuffle(){
         collected=new int[42];
         for(int i=0;i<collected.length;i++){
             collected[i]=999;
         }
            for(int j=0;j<42;j++){
               int asd;
               do{
                Random ra=new Random();
                asd=ra.nextInt(42);
               }while(is_exist(asd));
               this.collected[j]=asd;
            }
    }
    private boolean is_exist(int x){
        for(int i=0;i<this.countries.size();i++){
            if(x==this.collected[i])
                return true;
        }
        return false;
    }

    public  void setTarget1(Country s) {
       this.select1=s;
        target1 = s.getName();
    }
    public  void setTarget2(Country s) {
        this.select2=s;
        target2 = s.getName();
    }
    public  Country getTarget1() {
        return select1;
    }
    public  Country getTarget2() {
        return select2;
    }
    
    private  void phasethread(){
         deploymentpnl.setVisible(false);
         attackingpnl.setVisible(false);
         renforcmentpnl.setVisible(false);
         if(zero_round<this.player_number){
              deploymentpnl.setVisible(true);
              deploy();
                    
         }
         else{
            switch (phase%3) {
                case 0:
                    deploymentpnl.setVisible(true);
                    deploy();
                    break;
                case 1:
                    attackingpnl.setVisible(true);
                    attack();
                    break;
                case 2:
                    renforcmentpnl.setVisible(true);
                    renforce();
                    break;
                default:
                    break;
            }
         }
    }
    public  void deploy(){
        renforcment_counter=false;
        target1txt_dep.setText("..");
        target1txt_att.setText("..");
        target1txt_ren.setText("..");
        target2txt_att.setText("..");
        target2txt_ren.setText("..");
        target1="..";
        target2="..";
        select1=null;
        select2=null;
        int deployno;
         if(zero_round<this.player_number){
              deployno=this.current.getRemainingSolders();
                    
         }
         else{
         deployno=this.current.getDeploySolders();
         }
        this.dep_scrl_value=deployno;
        this.solders_scrlbar_dep.setMaximum(deployno);
    }
    public  void attack(){
         this.current.subSoldier(current.getRemainingSolders());
         if(select1!=null && select2!=null){
            ArrayList Adices=new ArrayList();
            ArrayList Ddices=new ArrayList();
            Adices.add(Adice1);
            Adices.add(Adice2);
            Adices.add(Adice3);
            Collections.sort(Adices);
            Ddices.add(Ddice1);
            Ddices.add(Ddice2);
            Collections.sort(Ddices);
            if(att_scrl_value>solders_scrlbar_att.getMaximum()){
                att_scrl_value=solders_scrlbar_att.getMaximum();
            }
            if(att_scrl_value>3)
            {
                        if(select2.getNo_of_soldiers()>=2)
                        {
                                    if((int)Adices.get(2)>(int)Ddices.get(1))
                                    {
                                        select2.Soldiersdecrease();
                                    }
                                    else if((int)Adices.get(2)<=(int)Ddices.get(1))
                                    {
                                        select1.Soldiersdecrease();
                                        this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                        if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                        repaint();
                                    }
                                    if((int)Adices.get(1)>(int)Ddices.get(0))
                                    {
                                        select2.Soldiersdecrease();
                                    }
                                    else if((int)Adices.get(1)<=(int)Ddices.get(0))
                                    {
                                        select1.Soldiersdecrease();
                                        this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                        if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                        repaint();                                        
                                    }
                       }
                       else if(select2.getNo_of_soldiers()==1)
                        {
                                       if((int)Adices.get(2)>(int)Ddices.get(0))
                                    {
                                        select2.Soldiersdecrease();
                                    }
                                    else if((int)Adices.get(2)<=(int)Ddices.get(0))
                                    {
                                        select1.Soldiersdecrease();
                                        this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                        if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                        repaint();                                        
                                    }
                       }
            }
            else if(att_scrl_value==3){
                         if(select2.getNo_of_soldiers()>=2){
                                        if((int)Adices.get(1)>(int)Ddices.get(1)){
                                            select2.Soldiersdecrease();
                                        }
                                        else if((int)Adices.get(1)<=(int)Ddices.get(1)){
                                            select1.Soldiersdecrease();
                                            this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                            if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }                                            
                                            repaint();                                            
                                        }
                                        if((int)Adices.get(0)>(int)Ddices.get(0)){
                                            select2.Soldiersdecrease();
                                        }
                                        else if((int)Adices.get(0)<=(int)Ddices.get(0)){
                                            select1.Soldiersdecrease();
                                            this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                            if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }                                           
                                            repaint();
                                        }
                          }
                         else if(select2.getNo_of_soldiers()==1){
                                        if((int)Adices.get(1)>(int)Ddices.get(0)){
                                            select2.Soldiersdecrease();
                                        }
                                        else if((int)Adices.get(1)<=(int)Ddices.get(0)){
                                            select1.Soldiersdecrease();
                                            this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                            if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                            repaint();                                            
                                        }
                }
            }
             else if(att_scrl_value==2){
                        if(select2.getNo_of_soldiers()>=2){
                                if((int)Adices.get(0)>(int)Ddices.get(1)){
                                    select2.Soldiersdecrease();
                                }
                                else if((int)Adices.get(0)<=(int)Ddices.get(1)){
                                    select1.Soldiersdecrease();
                                     this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                    if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                    repaint();                                    
                                }
                        }
                      else if(select2.getNo_of_soldiers()==1){
                                if((int)Adices.get(0)>(int)Ddices.get(0)){
                                    select2.Soldiersdecrease();
                                }
                                else if((int)Adices.get(0)<=(int)Ddices.get(0)){
                                    select1.Soldiersdecrease();
                                    this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                    if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                    repaint();                                    
                                }
                     }
            }
                         else if(att_scrl_value==1){
                        if(select2.getNo_of_soldiers()>=2){
                                if((int)Adices.get(0)>(int)Ddices.get(1)){
                                    select2.Soldiersdecrease();
                                }
                                else if((int)Adices.get(0)<=(int)Ddices.get(1)){
                                    select1.Soldiersdecrease();
                                     this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                    if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                    repaint();                                    
                                }
                        }
                      else if(select2.getNo_of_soldiers()==1){
                                if((int)Adices.get(0)>(int)Ddices.get(0)){
                                    select2.Soldiersdecrease();
                                }
                                else if((int)Adices.get(0)<=(int)Ddices.get(0)){
                                    select1.Soldiersdecrease();
                                    this.solders_scrlbar_att.setMinimum(0);
                                     this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
                                    if(solders_scrlbar_att.getValue()>solders_scrlbar_att.getMaximum()){
                                             solders_scrlbar_att.setValue(solders_scrlbar_att.getMaximum());
                                        }
                                    repaint();                                    
                                }
                     }
            }
         }
         if(select2!=null){
         if(select2.getNo_of_soldiers()==0){
             select2.setOwner(current);
             defending.removeCountry(select2);
             current.addCountry(select2);
             select2.setColor(current.getColor());
             select2.setNo_of_soldiers(att_scrl_value);
             select1.Soldiersdecrease(att_scrl_value);
             solders_scrlbar_att.setValue(0);
             target1txt_dep.setText("..");
             target1txt_att.setText("..");
             target1txt_ren.setText("..");
             target2txt_att.setText("..");
             target2txt_ren.setText("..");
             target1="..";
             target2="..";
             if(defending.getCountries().size()<=0){
               this.player_remaining--;
               this.player_number--;
               this.players.remove(defending);
           }
             select1=null;
             select2=null;
         } 
         }
         repaint();
       if(this.player_remaining==1){
           JOptionPane.showMessageDialog(rootPane, "You Win!...");
           try{
           Writer w=new PrintWriter("new.txt");
           BufferedWriter bw=new BufferedWriter(w);
           bw.append(current.getName()+"\n");
           w.flush();
           }catch (Exception e){
               
           }
          
           System.exit(0);
       }
       
    }
    public  void renforce(){
        target1txt_dep.setText("..");
        target1txt_att.setText("..");
        target1txt_ren.setText("..");
        target2txt_att.setText("..");
        target2txt_ren.setText("..");
        target1="..";
        target2="..";
        select1=null;
        select2=null;
       
    }
    
    public void selectorop(ActionEvent e){
        String s=((JButton)e.getSource()).getText();
        if(target1.equals(s) || target2.equals(s)){
            if(target1.equals(s))
            {
                target1="..";
                select1=null;
                for(int i=0;i<this.countries.size();i++){
                    if(s.equals(countries.get(i).btn.getText())){
                        countries.get(i).unSelect();
                        break;
                      }
                    }
                target1txt_dep.setText("..");
                target1txt_att.setText("..");
                target1txt_ren.setText("..");
                repaint();
              }
               else if(target2.equals(s)){
                   target2="..";
                  select2=null;
                  this.defending=null;
                  for(int i=0;i<this.countries.size();i++){
                      if(s.equals(countries.get(i).btn.getText())){
                          countries.get(i).unSelect();
                          break;
                      }
                    }
                  target2txt_att.setText("..");
                  target2txt_ren.setText("..");
                  repaint();
              }
          }
          else{
              if("..".equals(target1)){
                  target1=s;
                  for(int i=0;i<this.countries.size();i++){
                      if(s.equals(countries.get(i).btn.getText())){
                          select1=countries.get(i);
                          if(select1.getOwner()!=this.current){
                              //JOptionPane jop1=new JOptionPane("please select one of your country", JOptionPane.ERROR_MESSAGE, JOptionPane.OK_OPTION);
                              JOptionPane.showMessageDialog(null, "please select one of your country");
                              target1txt_dep.setText("..");
                              target1txt_att.setText("..");
                              target1txt_ren.setText("..");
                              target1="..";
                              select1=null;
                              break;
                          }
                          else{
                              target1txt_dep.setText(s);
                              target1txt_att.setText(s);
                              target1txt_ren.setText(s);
                              countries.get(i).Select();
                              break;
                          }
                      }
                  }
                  repaint();
              }
              else if(!(target1.equals(s))&&"..".equals(target2)){
                  target2=s;
                  OUTER:
                  for (int i = 0; i<this.countries.size(); i++) {
                      if (s.equals(countries.get(i).btn.getText())) {
                          select2=countries.get(i);
                          this.defending=countries.get(i).getOwner();
                          switch (phase%3) {
                              case 0:
                                  target2txt_att.setText("..");
                                  target2txt_ren.setText("..");
                                  target2="..";
                                  select2=null;
                                  this.defending=null;
                                  break OUTER;
                              case 1:
                                  if (select2.getOwner()==this.current || !(select1.isAdjesent(select2))) {
                                      //JOptionPane jop1=new JOptionPane("please select one of ypur country", JOptionPane.ERROR_MESSAGE, JOptionPane.OK_OPTION);
                                      JOptionPane.showMessageDialog(null, "please select one of your adjesent enemy country");
                                      target2txt_att.setText("..");
                                      target2txt_ren.setText("..");
                                      target2="..";
                                      select2=null;
                                      this.defending=null;
                                      break OUTER;
                                  } else {
                                      target2txt_att.setText(s);
                                      target2txt_ren.setText(s);
                                      countries.get(i).Select();
                                      break OUTER;
                                  }
                              case 2:
                                  if (select2.getOwner()!=this.current || !(select1.isAdjesent(select2))) {
                                      //JOptionPane jop1=new JOptionPane("please select one of ypur country", JOptionPane.ERROR_MESSAGE, JOptionPane.OK_OPTION);
                                      JOptionPane.showMessageDialog(null, "please select one of your adjesent own country");
                                      target2txt_att.setText("..");
                                      target2txt_ren.setText("..");
                                      target2="..";
                                      select2=null;
                                      this.defending=null;
                                      break OUTER;
                                  } else {
                                      target2txt_att.setText(s);
                                      target2txt_ren.setText(s);
                                      countries.get(i).Select();
                                      break OUTER;
                                  }
                              default:
                                  break;
                          }
                      }
                  }
                  repaint();
              }
          }
    }
            
  
    
    public void okDep(/*int i*/){//the action listenner of ok btn of dep//btwza3 2l gnod
        //Player p=(Player)players.get(i);
       /* int n=solders_scrlbar_dep.getValue();
        for(int j=0;j<players.get(playernumber).getCountry().size();j++){
            if(players.get(playernumber).getCountry(j).getName().equals(target1)){
                players.get(playernumber).addSoldInCont(j,n);
                solders_scrlbar_dep.setMaximum(solders_scrlbar_dep.getMaximum()-n);
                players.get(playernumber).getCountry(j).unSelect();
            }
        }*/
    }
    

   
   

    



    
    
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        SIBERIA = new javax.swing.JLabel();
        SIBERIA_SERIAL = new javax.swing.JLabel();
        YAKUTSK = new javax.swing.JLabel();
        YAKUTSK_SERIAL = new javax.swing.JLabel();
        Kamchatka = new javax.swing.JLabel();
        Kamchatkaserial = new javax.swing.JLabel();
        Ontario = new javax.swing.JLabel();
        Iceland = new javax.swing.JLabel();
        Irkutsk = new javax.swing.JLabel();
        China = new javax.swing.JLabel();
        Brazilserial = new javax.swing.JLabel();
        Peruserial = new javax.swing.JLabel();
        Brazil = new javax.swing.JLabel();
        EastAfricaserial = new javax.swing.JLabel();
        EasternUS = new javax.swing.JLabel();
        India = new javax.swing.JLabel();
        Ukraineserial = new javax.swing.JLabel();
        Mongolia = new javax.swing.JLabel();
        Siamserial = new javax.swing.JLabel();
        Afganistan = new javax.swing.JLabel();
        Afganistanserial = new javax.swing.JLabel();
        NewGuineaserial = new javax.swing.JLabel();
        NewGuinea = new javax.swing.JLabel();
        SouthAfricaserial = new javax.swing.JLabel();
        Madagascer = new javax.swing.JLabel();
        EasternAustralia = new javax.swing.JLabel();
        EasternAustraliaserial = new javax.swing.JLabel();
        NorthAfricaserial = new javax.swing.JLabel();
        Madagascerserial = new javax.swing.JLabel();
        Chinaserial = new javax.swing.JLabel();
        Indiaserial = new javax.swing.JLabel();
        Icelandserial = new javax.swing.JLabel();
        Japanserial = new javax.swing.JLabel();
        Ukraine = new javax.swing.JLabel();
        Irkutskserial = new javax.swing.JLabel();
        Mongoliaserial = new javax.swing.JLabel();
        GreatBritain = new javax.swing.JLabel();
        Quebecserial = new javax.swing.JLabel();
        SouthernEuropeserial = new javax.swing.JLabel();
        Siam = new javax.swing.JLabel();
        Peru = new javax.swing.JLabel();
        Egypt = new javax.swing.JLabel();
        MiddleEastserial = new javax.swing.JLabel();
        EastAfrica = new javax.swing.JLabel();
        NorthernEurope = new javax.swing.JLabel();
        Egyptserial = new javax.swing.JLabel();
        MiddleEast = new javax.swing.JLabel();
        Indonesia = new javax.swing.JLabel();
        Indonesiaserial = new javax.swing.JLabel();
        WestrenAustralia = new javax.swing.JLabel();
        WestrenAustraliaserial = new javax.swing.JLabel();
        NorthAfrica = new javax.swing.JLabel();
        SouthAfrica = new javax.swing.JLabel();
        congoserial = new javax.swing.JLabel();
        congo = new javax.swing.JLabel();
        Argentina = new javax.swing.JLabel();
        Argentinaserial = new javax.swing.JLabel();
        Venezuelaserial = new javax.swing.JLabel();
        Venezuela = new javax.swing.JLabel();
        GreatBritainserial = new javax.swing.JLabel();
        Japan = new javax.swing.JLabel();
        Greenland = new javax.swing.JLabel();
        Greenland_serial = new javax.swing.JLabel();
        Scandinavia = new javax.swing.JLabel();
        Ural = new javax.swing.JLabel();
        Uralserial = new javax.swing.JLabel();
        Scandinaviaserial = new javax.swing.JLabel();
        SouthernEurope = new javax.swing.JLabel();
        Ontarioserial = new javax.swing.JLabel();
        NorthernEuropeserial = new javax.swing.JLabel();
        EasternUSserial = new javax.swing.JLabel();
        NORTHWEST = new javax.swing.JLabel();
        NORTHWEST_SERIAL = new javax.swing.JLabel();
        WesternUS = new javax.swing.JLabel();
        WesternUS_serial = new javax.swing.JLabel();
        ALASKA_SERAIL = new javax.swing.JLabel();
        CentralAmerica = new javax.swing.JLabel();
        CentralAmericaSerial = new javax.swing.JLabel();
        ALASKA = new javax.swing.JLabel();
        Quebec = new javax.swing.JLabel();
        WesternEurope = new javax.swing.JLabel();
        WesternEuropeserial = new javax.swing.JLabel();
        Alberta = new javax.swing.JLabel();
        ALBETRA_SERIAL = new javax.swing.JLabel();
        Siberiabtn = new javax.swing.JButton();
        Yakutskbtn = new javax.swing.JButton();
        Uralbtn = new javax.swing.JButton();
        Irkutskbtn = new javax.swing.JButton();
        Mongoliabtn = new javax.swing.JButton();
        Japanbtn = new javax.swing.JButton();
        Chinabtn = new javax.swing.JButton();
        Ukrainebtn = new javax.swing.JButton();
        Afganistanbtn = new javax.swing.JButton();
        Scandinaviabtn = new javax.swing.JButton();
        NorthernEuropebtn = new javax.swing.JButton();
        WesternEuropebtn = new javax.swing.JButton();
        SouthernEuropebtn = new javax.swing.JButton();
        Egyptbtn = new javax.swing.JButton();
        MiddleEastbtn = new javax.swing.JButton();
        Indiabtn = new javax.swing.JButton();
        Siambtn = new javax.swing.JButton();
        Indonesiabtn = new javax.swing.JButton();
        NewGuineabtn = new javax.swing.JButton();
        Kamchatkabtn = new javax.swing.JButton();
        EastAfricabtn = new javax.swing.JButton();
        congobtn = new javax.swing.JButton();
        SouthAfricabtn = new javax.swing.JButton();
        Madagascerbtn = new javax.swing.JButton();
        EasternAustraliabtn = new javax.swing.JButton();
        WestrenAustraliabtn = new javax.swing.JButton();
        NorthAfricabtn = new javax.swing.JButton();
        Brazilbtn = new javax.swing.JButton();
        Perubtn = new javax.swing.JButton();
        Argentinabtn = new javax.swing.JButton();
        GreatBritainbtn = new javax.swing.JButton();
        Icelandbtn = new javax.swing.JButton();
        Quebecbtn = new javax.swing.JButton();
        Venezuelabtn = new javax.swing.JButton();
        CentralAmericabtn = new javax.swing.JButton();
        WesternUSbtn = new javax.swing.JButton();
        Ontariobtn = new javax.swing.JButton();
        ALBERTABTN = new javax.swing.JButton();
        NORTHWEST_BTN = new javax.swing.JButton();
        ALASKABTN = new javax.swing.JButton();
        EasternUSbtn = new javax.swing.JButton();
        Greenlandbtn = new javax.swing.JButton();
        nextroundbtn = new javax.swing.JButton();
        deploymentpnl = new javax.swing.JPanel();
        target1lbl_dep = new javax.swing.JLabel();
        target1txt_dep = new javax.swing.JLabel();
        deplymentok2 = new javax.swing.JButton();
        solders_scrlbar_dep = new javax.swing.JScrollBar();
        soldersserial = new javax.swing.JLabel();
        attackingpnl = new javax.swing.JPanel();
        target1lbl_att = new javax.swing.JLabel();
        target1txt_att = new javax.swing.JLabel();
        target2lbl_att = new javax.swing.JLabel();
        target2txt_att = new javax.swing.JLabel();
        attackingdice2 = new javax.swing.JLabel();
        defendingdice2 = new javax.swing.JLabel();
        attackingdice1 = new javax.swing.JLabel();
        attackingdice3 = new javax.swing.JLabel();
        defendingdice1 = new javax.swing.JLabel();
        attackingok = new javax.swing.JButton();
        solders_scrlbar_att = new javax.swing.JScrollBar();
        soldersserial1 = new javax.swing.JLabel();
        renforcmentpnl = new javax.swing.JPanel();
        target1lbl_ren = new javax.swing.JLabel();
        target1txt_ren = new javax.swing.JLabel();
        target2lbl_ren = new javax.swing.JLabel();
        target2txt_ren = new javax.swing.JLabel();
        solders_scrlbar_ren = new javax.swing.JScrollBar();
        soldersserial2 = new javax.swing.JLabel();
        renforcmentok = new javax.swing.JButton();
        msgpnl = new javax.swing.JPanel();
        msglbl = new javax.swing.JLabel();
        map = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Risk Game");
        setBounds(new java.awt.Rectangle(0, 0, 1360, 723));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1360, 723));
        setPreferredSize(Toolkit.getDefaultToolkit().getScreenSize());
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(1270, 700));
        jPanel1.setMinimumSize(new java.awt.Dimension(1270, 700));
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.setLayout(null);

        SIBERIA.setBackground(new java.awt.Color(255, 255, 255));
        SIBERIA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SIBERIA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SIBERIA.setText("Siberia");
        jPanel1.add(SIBERIA);
        SIBERIA.setBounds(760, 120, 50, 15);

        SIBERIA_SERIAL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SIBERIA_SERIAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SIBERIA_SERIAL.setText("1");
        SIBERIA_SERIAL.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(SIBERIA_SERIAL);
        SIBERIA_SERIAL.setBounds(760, 140, 40, 30);

        YAKUTSK.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        YAKUTSK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        YAKUTSK.setText("Yakutsk");
        jPanel1.add(YAKUTSK);
        YAKUTSK.setBounds(870, 110, 60, 15);

        YAKUTSK_SERIAL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        YAKUTSK_SERIAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        YAKUTSK_SERIAL.setText("1");
        YAKUTSK_SERIAL.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(YAKUTSK_SERIAL);
        YAKUTSK_SERIAL.setBounds(870, 120, 30, 30);

        Kamchatka.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Kamchatka.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Kamchatka.setText("Kamchatka");
        jPanel1.add(Kamchatka);
        Kamchatka.setBounds(976, 128, 90, 15);

        Kamchatkaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Kamchatkaserial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Kamchatkaserial.setText("0");
        Kamchatkaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Kamchatkaserial);
        Kamchatkaserial.setBounds(990, 140, 30, 30);

        Ontario.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ontario.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ontario.setText("Ontario");
        jPanel1.add(Ontario);
        Ontario.setBounds(220, 170, 60, 15);

        Iceland.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Iceland.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Iceland.setText("Iceland");
        jPanel1.add(Iceland);
        Iceland.setBounds(430, 140, 60, 15);

        Irkutsk.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Irkutsk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Irkutsk.setText("Irkutsk");
        jPanel1.add(Irkutsk);
        Irkutsk.setBounds(830, 180, 60, 15);

        China.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        China.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        China.setText("China");
        jPanel1.add(China);
        China.setBounds(760, 290, 50, 15);

        Brazilserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Brazilserial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Brazilserial.setText("0");
        Brazilserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Brazilserial);
        Brazilserial.setBounds(270, 470, 30, 30);

        Peruserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Peruserial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Peruserial.setText("0");
        Peruserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Peruserial);
        Peruserial.setBounds(200, 500, 30, 30);

        Brazil.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Brazil.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Brazil.setText("Brazil");
        jPanel1.add(Brazil);
        Brazil.setBounds(270, 450, 50, 15);

        EastAfricaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EastAfricaserial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EastAfricaserial.setText("0");
        EastAfricaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(EastAfricaserial);
        EastAfricaserial.setBounds(540, 460, 30, 30);

        EasternUS.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EasternUS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EasternUS.setText("Eastern US");
        jPanel1.add(EasternUS);
        EasternUS.setBounds(239, 257, 70, 15);

        India.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        India.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        India.setText("India");
        jPanel1.add(India);
        India.setBounds(720, 370, 40, 15);

        Ukraineserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ukraineserial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Ukraineserial.setText("0");
        Ukraineserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Ukraineserial);
        Ukraineserial.setBounds(590, 200, 30, 30);

        Mongolia.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Mongolia.setText("Mongolia");
        jPanel1.add(Mongolia);
        Mongolia.setBounds(870, 240, 80, 15);

        Siamserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Siamserial.setText("0");
        Siamserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Siamserial);
        Siamserial.setBounds(800, 410, 30, 30);

        Afganistan.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Afganistan.setText("Afganistan");
        jPanel1.add(Afganistan);
        Afganistan.setBounds(670, 240, 80, 15);

        Afganistanserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Afganistanserial.setText("0");
        jPanel1.add(Afganistanserial);
        Afganistanserial.setBounds(680, 255, 30, 30);

        NewGuineaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NewGuineaserial.setText("0");
        NewGuineaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(NewGuineaserial);
        NewGuineaserial.setBounds(936, 496, 30, 30);

        NewGuinea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NewGuinea.setText("New Guinea");
        jPanel1.add(NewGuinea);
        NewGuinea.setBounds(936, 475, 90, 15);

        SouthAfricaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SouthAfricaserial.setText("0");
        SouthAfricaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(SouthAfricaserial);
        SouthAfricaserial.setBounds(500, 610, 30, 25);

        Madagascer.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Madagascer.setText("Madagascer");
        jPanel1.add(Madagascer);
        Madagascer.setBounds(600, 590, 80, 15);

        EasternAustralia.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EasternAustralia.setText("Eastern Australia");
        jPanel1.add(EasternAustralia);
        EasternAustralia.setBounds(936, 581, 110, 15);

        EasternAustraliaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EasternAustraliaserial.setText("0");
        EasternAustraliaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(EasternAustraliaserial);
        EasternAustraliaserial.setBounds(950, 600, 30, 30);

        NorthAfricaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NorthAfricaserial.setText("0");
        NorthAfricaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(NorthAfricaserial);
        NorthAfricaserial.setBounds(410, 430, 30, 30);

        Madagascerserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Madagascerserial.setText("0");
        Madagascerserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Madagascerserial);
        Madagascerserial.setBounds(600, 610, 30, 30);

        Chinaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Chinaserial.setText("0");
        Chinaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Chinaserial);
        Chinaserial.setBounds(750, 300, 30, 30);

        Indiaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Indiaserial.setText("0");
        Indiaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Indiaserial);
        Indiaserial.setBounds(720, 380, 30, 30);

        Icelandserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Icelandserial.setText("0");
        Icelandserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Icelandserial);
        Icelandserial.setBounds(430, 150, 30, 30);

        Japanserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Japanserial.setText("0");
        Japanserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Japanserial);
        Japanserial.setBounds(930, 290, 30, 30);

        Ukraine.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ukraine.setText("Ukraine");
        jPanel1.add(Ukraine);
        Ukraine.setBounds(600, 180, 60, 15);

        Irkutskserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Irkutskserial.setText("0");
        Irkutskserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Irkutskserial);
        Irkutskserial.setBounds(830, 190, 30, 30);

        Mongoliaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Mongoliaserial.setText("0");
        Mongoliaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Mongoliaserial);
        Mongoliaserial.setBounds(870, 250, 30, 30);

        GreatBritain.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        GreatBritain.setText("Great Britain");
        jPanel1.add(GreatBritain);
        GreatBritain.setBounds(410, 190, 80, 15);

        Quebecserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Quebecserial.setText("0");
        Quebecserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Quebecserial);
        Quebecserial.setBounds(310, 200, 30, 30);

        SouthernEuropeserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SouthernEuropeserial.setText("0");
        SouthernEuropeserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(SouthernEuropeserial);
        SouthernEuropeserial.setBounds(500, 280, 20, 30);

        Siam.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Siam.setText("Siam");
        jPanel1.add(Siam);
        Siam.setBounds(810, 390, 40, 15);

        Peru.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Peru.setText("Peru");
        jPanel1.add(Peru);
        Peru.setBounds(200, 490, 40, 15);

        Egypt.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Egypt.setText("Egypt");
        jPanel1.add(Egypt);
        Egypt.setBounds(520, 370, 40, 15);

        MiddleEastserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MiddleEastserial.setText("0");
        MiddleEastserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(MiddleEastserial);
        MiddleEastserial.setBounds(600, 360, 30, 30);

        EastAfrica.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EastAfrica.setText("East Africa");
        jPanel1.add(EastAfrica);
        EastAfrica.setBounds(540, 440, 80, 15);

        NorthernEurope.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NorthernEurope.setText("Northern Europe");
        jPanel1.add(NorthernEurope);
        NorthernEurope.setBounds(480, 210, 90, 15);

        Egyptserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Egyptserial.setText("0");
        Egyptserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Egyptserial);
        Egyptserial.setBounds(510, 380, 30, 30);

        MiddleEast.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MiddleEast.setText("Middle East");
        jPanel1.add(MiddleEast);
        MiddleEast.setBounds(600, 340, 80, 15);

        Indonesia.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Indonesia.setText("Indonesia");
        jPanel1.add(Indonesia);
        Indonesia.setBounds(802, 469, 80, 15);

        Indonesiaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Indonesiaserial.setText("0");
        Indonesiaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Indonesiaserial);
        Indonesiaserial.setBounds(810, 490, 30, 30);

        WestrenAustralia.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WestrenAustralia.setText("Westren Australia");
        jPanel1.add(WestrenAustralia);
        WestrenAustralia.setBounds(790, 580, 110, 15);

        WestrenAustraliaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WestrenAustraliaserial.setText("0");
        WestrenAustraliaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(WestrenAustraliaserial);
        WestrenAustraliaserial.setBounds(820, 600, 30, 30);

        NorthAfrica.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NorthAfrica.setText("North Africa");
        jPanel1.add(NorthAfrica);
        NorthAfrica.setBounds(410, 410, 70, 15);

        SouthAfrica.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SouthAfrica.setText("South Africa");
        jPanel1.add(SouthAfrica);
        SouthAfrica.setBounds(495, 588, 80, 15);

        congoserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        congoserial.setText("0");
        congoserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(congoserial);
        congoserial.setBounds(510, 520, 30, 30);

        congo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        congo.setText("Congo");
        jPanel1.add(congo);
        congo.setBounds(510, 496, 50, 15);

        Argentina.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Argentina.setText("Argentina");
        jPanel1.add(Argentina);
        Argentina.setBounds(220, 570, 70, 15);

        Argentinaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Argentinaserial.setText("0");
        Argentinaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Argentinaserial);
        Argentinaserial.setBounds(230, 590, 30, 30);

        Venezuelaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Venezuelaserial.setText("0");
        Venezuelaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Venezuelaserial);
        Venezuelaserial.setBounds(200, 400, 30, 30);

        Venezuela.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Venezuela.setText("Venezuela");
        jPanel1.add(Venezuela);
        Venezuela.setBounds(200, 390, 60, 15);

        GreatBritainserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        GreatBritainserial.setText("0");
        GreatBritainserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(GreatBritainserial);
        GreatBritainserial.setBounds(420, 210, 30, 30);

        Japan.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Japan.setText("Japan");
        jPanel1.add(Japan);
        Japan.setBounds(940, 270, 40, 15);

        Greenland.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Greenland.setText("Greenland");
        jPanel1.add(Greenland);
        Greenland.setBounds(380, 60, 80, 15);

        Greenland_serial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Greenland_serial.setText("0");
        Greenland_serial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Greenland_serial);
        Greenland_serial.setBounds(380, 70, 30, 30);

        Scandinavia.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Scandinavia.setText("Scandinavia");
        jPanel1.add(Scandinavia);
        Scandinavia.setBounds(490, 130, 90, 15);

        Ural.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ural.setText("Ural");
        jPanel1.add(Ural);
        Ural.setBounds(700, 150, 40, 15);

        Uralserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Uralserial.setText("0");
        jPanel1.add(Uralserial);
        Uralserial.setBounds(700, 175, 20, 30);

        Scandinaviaserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Scandinaviaserial.setText("0");
        Scandinaviaserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Scandinaviaserial);
        Scandinaviaserial.setBounds(500, 150, 30, 30);

        SouthernEurope.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SouthernEurope.setText("Southern Europe");
        jPanel1.add(SouthernEurope);
        SouthernEurope.setBounds(490, 270, 110, 15);

        Ontarioserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ontarioserial.setText("0");
        Ontarioserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(Ontarioserial);
        Ontarioserial.setBounds(230, 180, 30, 30);

        NorthernEuropeserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NorthernEuropeserial.setText("0");
        NorthernEuropeserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(NorthernEuropeserial);
        NorthernEuropeserial.setBounds(490, 220, 30, 30);

        EasternUSserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EasternUSserial.setText("0");
        EasternUSserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(EasternUSserial);
        EasternUSserial.setBounds(240, 270, 30, 30);

        NORTHWEST.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NORTHWEST.setText("Northwest Territory");
        jPanel1.add(NORTHWEST);
        NORTHWEST.setBounds(120, 110, 120, 14);

        NORTHWEST_SERIAL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NORTHWEST_SERIAL.setText("0");
        NORTHWEST_SERIAL.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(NORTHWEST_SERIAL);
        NORTHWEST_SERIAL.setBounds(120, 120, 30, 30);

        WesternUS.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WesternUS.setText("Western US");
        jPanel1.add(WesternUS);
        WesternUS.setBounds(140, 230, 80, 15);

        WesternUS_serial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WesternUS_serial.setText("0");
        WesternUS_serial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(WesternUS_serial);
        WesternUS_serial.setBounds(140, 250, 30, 30);

        ALASKA_SERAIL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ALASKA_SERAIL.setText("0");
        ALASKA_SERAIL.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(ALASKA_SERAIL);
        ALASKA_SERAIL.setBounds(40, 120, 30, 30);

        CentralAmerica.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CentralAmerica.setText("Central America");
        jPanel1.add(CentralAmerica);
        CentralAmerica.setBounds(140, 310, 90, 15);

        CentralAmericaSerial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CentralAmericaSerial.setText("0");
        CentralAmericaSerial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(CentralAmericaSerial);
        CentralAmericaSerial.setBounds(150, 330, 30, 30);

        ALASKA.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ALASKA.setText("Alaska");
        jPanel1.add(ALASKA);
        ALASKA.setBounds(40, 110, 60, 15);

        Quebec.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Quebec.setText("Quebec");
        jPanel1.add(Quebec);
        Quebec.setBounds(310, 184, 70, 15);

        WesternEurope.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WesternEurope.setText("Western Europe");
        jPanel1.add(WesternEurope);
        WesternEurope.setBounds(390, 290, 100, 15);

        WesternEuropeserial.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WesternEuropeserial.setText("0");
        WesternEuropeserial.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(WesternEuropeserial);
        WesternEuropeserial.setBounds(420, 310, 30, 30);

        Alberta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Alberta.setText("Alberta");
        jPanel1.add(Alberta);
        Alberta.setBounds(140, 170, 60, 15);

        ALBETRA_SERIAL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ALBETRA_SERIAL.setText("0");
        ALBETRA_SERIAL.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel1.add(ALBETRA_SERIAL);
        ALBETRA_SERIAL.setBounds(140, 180, 30, 30);

        Siberiabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Siberiabtn.setText("Siberia");
        Siberiabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiberiabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Siberiabtn);
        Siberiabtn.setBounds(800, 140, 20, 20);

        Yakutskbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Yakutskbtn.setText("Yakutsk");
        Yakutskbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YakutskbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Yakutskbtn);
        Yakutskbtn.setBounds(900, 130, 20, 20);

        Uralbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Uralbtn.setText("Ural");
        Uralbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UralbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Uralbtn);
        Uralbtn.setBounds(720, 180, 20, 20);

        Irkutskbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Irkutskbtn.setText("Irkutsk");
        Irkutskbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IrkutskbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Irkutskbtn);
        Irkutskbtn.setBounds(860, 200, 20, 20);

        Mongoliabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Mongoliabtn.setText("Mongolia");
        Mongoliabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MongoliabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Mongoliabtn);
        Mongoliabtn.setBounds(890, 260, 20, 20);

        Japanbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Japanbtn.setText("Japan");
        Japanbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JapanbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Japanbtn);
        Japanbtn.setBounds(950, 290, 20, 20);

        Chinabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Chinabtn.setText("China");
        Chinabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChinabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Chinabtn);
        Chinabtn.setBounds(790, 310, 20, 20);

        Ukrainebtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ukrainebtn.setText("Ukraine");
        Ukrainebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UkrainebtnActionPerformed(evt);
            }
        });
        jPanel1.add(Ukrainebtn);
        Ukrainebtn.setBounds(630, 200, 20, 20);

        Afganistanbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Afganistanbtn.setText("Afganistan");
        Afganistanbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AfganistanbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Afganistanbtn);
        Afganistanbtn.setBounds(700, 260, 20, 20);

        Scandinaviabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Scandinaviabtn.setText("Scandinavia");
        Scandinaviabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScandinaviabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Scandinaviabtn);
        Scandinaviabtn.setBounds(530, 150, 20, 20);

        NorthernEuropebtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NorthernEuropebtn.setText("Northern Europe");
        NorthernEuropebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthernEuropebtnActionPerformed(evt);
            }
        });
        jPanel1.add(NorthernEuropebtn);
        NorthernEuropebtn.setBounds(520, 230, 20, 20);

        WesternEuropebtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WesternEuropebtn.setText("Western Europe");
        WesternEuropebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WesternEuropebtnActionPerformed(evt);
            }
        });
        jPanel1.add(WesternEuropebtn);
        WesternEuropebtn.setBounds(450, 310, 20, 20);

        SouthernEuropebtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SouthernEuropebtn.setText("Southern Europe");
        SouthernEuropebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthernEuropebtnActionPerformed(evt);
            }
        });
        jPanel1.add(SouthernEuropebtn);
        SouthernEuropebtn.setBounds(530, 290, 20, 20);

        Egyptbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Egyptbtn.setText("Egypt");
        Egyptbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EgyptbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Egyptbtn);
        Egyptbtn.setBounds(540, 390, 20, 20);

        MiddleEastbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        MiddleEastbtn.setText("Middle East");
        MiddleEastbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleEastbtnActionPerformed(evt);
            }
        });
        jPanel1.add(MiddleEastbtn);
        MiddleEastbtn.setBounds(620, 370, 20, 20);

        Indiabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Indiabtn.setText("India");
        Indiabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndiabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Indiabtn);
        Indiabtn.setBounds(740, 390, 20, 20);

        Siambtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Siambtn.setText("Siam");
        Siambtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiambtnActionPerformed(evt);
            }
        });
        jPanel1.add(Siambtn);
        Siambtn.setBounds(830, 410, 20, 20);

        Indonesiabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Indonesiabtn.setText("Indonesia");
        Indonesiabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndonesiabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Indonesiabtn);
        Indonesiabtn.setBounds(840, 490, 20, 20);

        NewGuineabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NewGuineabtn.setText("New Guinea");
        NewGuineabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGuineabtnActionPerformed(evt);
            }
        });
        jPanel1.add(NewGuineabtn);
        NewGuineabtn.setBounds(970, 500, 20, 20);

        Kamchatkabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Kamchatkabtn.setText("Kamchatka");
        Kamchatkabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KamchatkabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Kamchatkabtn);
        Kamchatkabtn.setBounds(1020, 150, 20, 20);

        EastAfricabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EastAfricabtn.setText("East Africa");
        EastAfricabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EastAfricabtnActionPerformed(evt);
            }
        });
        jPanel1.add(EastAfricabtn);
        EastAfricabtn.setBounds(570, 470, 20, 20);

        congobtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        congobtn.setText("Congo");
        congobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                congobtnActionPerformed(evt);
            }
        });
        jPanel1.add(congobtn);
        congobtn.setBounds(530, 520, 20, 20);

        SouthAfricabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        SouthAfricabtn.setText("South Africa");
        SouthAfricabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SouthAfricabtnActionPerformed(evt);
            }
        });
        jPanel1.add(SouthAfricabtn);
        SouthAfricabtn.setBounds(530, 610, 20, 20);

        Madagascerbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Madagascerbtn.setText("Madagascer");
        Madagascerbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MadagascerbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Madagascerbtn);
        Madagascerbtn.setBounds(630, 610, 20, 20);

        EasternAustraliabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EasternAustraliabtn.setText("Eastern Australia");
        EasternAustraliabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EasternAustraliabtnActionPerformed(evt);
            }
        });
        jPanel1.add(EasternAustraliabtn);
        EasternAustraliabtn.setBounds(980, 600, 20, 20);

        WestrenAustraliabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WestrenAustraliabtn.setText("Westren Australia");
        WestrenAustraliabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WestrenAustraliabtnActionPerformed(evt);
            }
        });
        jPanel1.add(WestrenAustraliabtn);
        WestrenAustraliabtn.setBounds(840, 600, 20, 20);

        NorthAfricabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NorthAfricabtn.setText("North Africa");
        NorthAfricabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NorthAfricabtnActionPerformed(evt);
            }
        });
        jPanel1.add(NorthAfricabtn);
        NorthAfricabtn.setBounds(440, 430, 20, 20);

        Brazilbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Brazilbtn.setText("Brazil");
        Brazilbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrazilbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Brazilbtn);
        Brazilbtn.setBounds(300, 470, 20, 20);

        Perubtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Perubtn.setText("Peru");
        Perubtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PerubtnActionPerformed(evt);
            }
        });
        jPanel1.add(Perubtn);
        Perubtn.setBounds(240, 510, 20, 20);

        Argentinabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Argentinabtn.setText("Argentina");
        Argentinabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArgentinabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Argentinabtn);
        Argentinabtn.setBounds(250, 600, 20, 20);

        GreatBritainbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        GreatBritainbtn.setText("Great Britain");
        GreatBritainbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreatBritainbtnActionPerformed(evt);
            }
        });
        jPanel1.add(GreatBritainbtn);
        GreatBritainbtn.setBounds(450, 220, 20, 20);

        Icelandbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Icelandbtn.setText("Iceland");
        Icelandbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IcelandbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Icelandbtn);
        Icelandbtn.setBounds(450, 160, 20, 20);

        Quebecbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Quebecbtn.setText("Quebec");
        Quebecbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuebecbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Quebecbtn);
        Quebecbtn.setBounds(330, 210, 20, 20);

        Venezuelabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Venezuelabtn.setText("Venezuela");
        Venezuelabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenezuelabtnActionPerformed(evt);
            }
        });
        jPanel1.add(Venezuelabtn);
        Venezuelabtn.setBounds(230, 410, 20, 20);

        CentralAmericabtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CentralAmericabtn.setText("Central America");
        CentralAmericabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentralAmericabtnActionPerformed(evt);
            }
        });
        jPanel1.add(CentralAmericabtn);
        CentralAmericabtn.setBounds(180, 330, 20, 20);

        WesternUSbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        WesternUSbtn.setText("Western US");
        WesternUSbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WesternUSbtnActionPerformed(evt);
            }
        });
        jPanel1.add(WesternUSbtn);
        WesternUSbtn.setBounds(170, 260, 20, 20);

        Ontariobtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Ontariobtn.setText("Ontario");
        Ontariobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OntariobtnActionPerformed(evt);
            }
        });
        jPanel1.add(Ontariobtn);
        Ontariobtn.setBounds(250, 190, 20, 20);

        ALBERTABTN.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ALBERTABTN.setText("Alberta");
        ALBERTABTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALBERTABTNActionPerformed(evt);
            }
        });
        jPanel1.add(ALBERTABTN);
        ALBERTABTN.setBounds(170, 190, 20, 20);

        NORTHWEST_BTN.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        NORTHWEST_BTN.setText("Northwest Territory");
        NORTHWEST_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NORTHWEST_BTNActionPerformed(evt);
            }
        });
        jPanel1.add(NORTHWEST_BTN);
        NORTHWEST_BTN.setBounds(170, 130, 20, 20);

        ALASKABTN.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ALASKABTN.setText("Alaska");
        ALASKABTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALASKABTNActionPerformed(evt);
            }
        });
        jPanel1.add(ALASKABTN);
        ALASKABTN.setBounds(60, 130, 20, 20);

        EasternUSbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        EasternUSbtn.setText("Eastern US");
        EasternUSbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EasternUSbtnActionPerformed(evt);
            }
        });
        jPanel1.add(EasternUSbtn);
        EasternUSbtn.setBounds(270, 280, 20, 20);

        Greenlandbtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Greenlandbtn.setText("Greenland");
        Greenlandbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreenlandbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Greenlandbtn);
        Greenlandbtn.setBounds(410, 80, 20, 20);

        nextroundbtn.setText("Next Round");
        nextroundbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextroundbtnActionPerformed(evt);
            }
        });
        jPanel1.add(nextroundbtn);
        nextroundbtn.setBounds(1070, 580, 200, 25);

        deploymentpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("deployment phase"));
        deploymentpnl.setLayout(null);

        target1lbl_dep.setText("target1");
        deploymentpnl.add(target1lbl_dep);
        target1lbl_dep.setBounds(10, 40, 50, 30);

        target1txt_dep.setText("...............");
        deploymentpnl.add(target1txt_dep);
        target1txt_dep.setBounds(60, 40, 120, 30);

        deplymentok2.setText("ok");
        deplymentok2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deplymentok2ActionPerformed(evt);
            }
        });
        deploymentpnl.add(deplymentok2);
        deplymentok2.setBounds(140, 10, 50, 30);

        solders_scrlbar_dep.setBlockIncrement(1);
        solders_scrlbar_dep.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        solders_scrlbar_dep.setVisibleAmount(0);
        solders_scrlbar_dep.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                solders_scrlbar_depAdjustmentValueChanged(evt);
            }
        });
        deploymentpnl.add(solders_scrlbar_dep);
        solders_scrlbar_dep.setBounds(10, 80, 140, 20);

        soldersserial.setText("0");
        deploymentpnl.add(soldersserial);
        soldersserial.setBounds(160, 70, 40, 40);

        jPanel1.add(deploymentpnl);
        deploymentpnl.setBounds(1070, 140, 200, 110);

        attackingpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Attacking Phase"));
        attackingpnl.setLayout(null);

        target1lbl_att.setText("target1");
        attackingpnl.add(target1lbl_att);
        target1lbl_att.setBounds(10, 40, 50, 30);

        target1txt_att.setText("...............");
        attackingpnl.add(target1txt_att);
        target1txt_att.setBounds(70, 40, 130, 30);

        target2lbl_att.setText("target2");
        attackingpnl.add(target2lbl_att);
        target2lbl_att.setBounds(10, 80, 70, 15);

        target2txt_att.setText("............");
        attackingpnl.add(target2txt_att);
        target2txt_att.setBounds(70, 70, 130, 30);

        attackingdice2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attackingdice2.setText("0");
        attackingdice2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attackingpnl.add(attackingdice2);
        attackingdice2.setBounds(40, 150, 30, 30);

        defendingdice2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        defendingdice2.setText("0");
        defendingdice2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attackingpnl.add(defendingdice2);
        defendingdice2.setBounds(150, 140, 40, 40);

        attackingdice1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attackingdice1.setText("0");
        attackingdice1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attackingpnl.add(attackingdice1);
        attackingdice1.setBounds(10, 150, 30, 30);

        attackingdice3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attackingdice3.setText("0");
        attackingdice3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attackingpnl.add(attackingdice3);
        attackingdice3.setBounds(70, 150, 30, 30);

        defendingdice1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        defendingdice1.setText("0");
        defendingdice1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        attackingpnl.add(defendingdice1);
        defendingdice1.setBounds(110, 140, 40, 40);

        attackingok.setText("ok");
        attackingok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackingokActionPerformed(evt);
            }
        });
        attackingpnl.add(attackingok);
        attackingok.setBounds(140, 10, 50, 30);

        solders_scrlbar_att.setBlockIncrement(1);
        solders_scrlbar_att.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        solders_scrlbar_att.setVisibleAmount(0);
        solders_scrlbar_att.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                solders_scrlbar_attAdjustmentValueChanged(evt);
            }
        });
        attackingpnl.add(solders_scrlbar_att);
        solders_scrlbar_att.setBounds(10, 110, 140, 20);

        soldersserial1.setText("0");
        attackingpnl.add(soldersserial1);
        soldersserial1.setBounds(160, 100, 40, 40);

        jPanel1.add(attackingpnl);
        attackingpnl.setBounds(1070, 250, 200, 190);

        renforcmentpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Renforcment phase"));
        renforcmentpnl.setLayout(null);

        target1lbl_ren.setText("target1");
        renforcmentpnl.add(target1lbl_ren);
        target1lbl_ren.setBounds(10, 40, 50, 30);

        target1txt_ren.setText("...............");
        renforcmentpnl.add(target1txt_ren);
        target1txt_ren.setBounds(70, 40, 120, 30);

        target2lbl_ren.setText("target2");
        renforcmentpnl.add(target2lbl_ren);
        target2lbl_ren.setBounds(10, 80, 50, 15);

        target2txt_ren.setText("............");
        renforcmentpnl.add(target2txt_ren);
        target2txt_ren.setBounds(70, 70, 130, 30);

        solders_scrlbar_ren.setBlockIncrement(1);
        solders_scrlbar_ren.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        solders_scrlbar_ren.setVisibleAmount(0);
        solders_scrlbar_ren.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                solders_scrlbar_renAdjustmentValueChanged(evt);
            }
        });
        renforcmentpnl.add(solders_scrlbar_ren);
        solders_scrlbar_ren.setBounds(10, 110, 140, 20);

        soldersserial2.setText("0");
        renforcmentpnl.add(soldersserial2);
        soldersserial2.setBounds(160, 100, 40, 40);

        renforcmentok.setText("ok");
        renforcmentok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renforcmentokActionPerformed(evt);
            }
        });
        renforcmentpnl.add(renforcmentok);
        renforcmentok.setBounds(140, 10, 50, 30);

        jPanel1.add(renforcmentpnl);
        renforcmentpnl.setBounds(1070, 440, 200, 140);

        msgpnl.setBorder(javax.swing.BorderFactory.createTitledBorder("Your Advisior"));
        msgpnl.setLayout(null);

        msglbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msglbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        msglbl.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        msgpnl.add(msglbl);
        msglbl.setBounds(10, 30, 220, 90);

        jPanel1.add(msgpnl);
        msgpnl.setBounds(1070, 10, 220, 130);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        map.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Capture.PNG"))); // NOI18N
        map.setToolTipText("");
        map.setMaximumSize(new java.awt.Dimension(1270, 720));
        map.setMinimumSize(new java.awt.Dimension(1270, 720));
        map.setPreferredSize(new java.awt.Dimension(1270, 720));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(map, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IrkutskbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IrkutskbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_IrkutskbtnActionPerformed

    private void ChinabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChinabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_ChinabtnActionPerformed

    private void GreenlandbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreenlandbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_GreenlandbtnActionPerformed

    private void WesternUSbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WesternUSbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_WesternUSbtnActionPerformed

    private void JapanbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JapanbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_JapanbtnActionPerformed

    private void nextroundbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextroundbtnActionPerformed
             phase++;
             round=phase/3;
             if(zero_round<this.player_number-1)
             {
                 zero_round++;
                 switch (this.zero_round%this.player_number)
                {
                    case 0:
                        this.msglbl.setText("It is "+players.get(0).getName()+":\nfirst deployment Round." );
                        this.msglbl.setForeground(players.get(0).getColor());
                        this.current=players.get(0);
                        break;
                    case 1:
                        this.msglbl.setText("It is "+players.get(1).getName()+":\nfirst deployment Round." );
                        this.msglbl.setForeground(players.get(1).getColor());
                        this.current=players.get(1);
                        break;
                    case 2:
                        this.msglbl.setText("It is "+players.get(2).getName()+":\nfirst deployment Round." );
                        this.msglbl.setForeground(players.get(2).getColor());
                        this.current=players.get(2);
                        break;
                    case 3:
                        this.msglbl.setText("It is "+players.get(3).getName()+":\nfirst deployment Round" );
                        this.msglbl.setForeground(players.get(3).getColor());
                        this.current=players.get(3);
                        break;
                    case 4:
                        this.msglbl.setText("It is "+players.get(4).getName()+":\nfirst deployment Round" );
                        this.msglbl.setForeground(players.get(4).getColor());
                        this.current=players.get(4);
                        break;
                    case 5:
                        this.msglbl.setText("It is "+players.get(5).getName()+":\nfirst deployment Round" ); 
                        this.msglbl.setForeground(players.get(5).getColor());
                        this.current=players.get(5);
                        break;
                }
             }
             else{
                switch (round%this.player_number)
                {
                    case 0:
                        this.msglbl.setText("It is "+players.get(0).getName()+" Round" );
                        this.msglbl.setForeground(players.get(0).getColor());
                        this.current=players.get(0);
                        break;
                    case 1:
                        this.msglbl.setText("It is "+players.get(1).getName()+" Round" );
                        this.msglbl.setForeground(players.get(1).getColor());
                        this.current=players.get(1);
                        break;
                    case 2:
                        this.msglbl.setText("It is "+players.get(2).getName()+" Round" );
                        this.msglbl.setForeground(players.get(2).getColor());
                        this.current=players.get(2);
                        break;
                    case 3:
                        this.msglbl.setText("It is "+players.get(3).getName()+" Round" );
                        this.msglbl.setForeground(players.get(3).getColor());
                        this.current=players.get(3);
                        break;
                    case 4:
                        this.msglbl.setText("It is "+players.get(4).getName()+" Round" );
                        this.msglbl.setForeground(players.get(4).getColor());
                        this.current=players.get(4);
                        break;
                    case 5:
                        this.msglbl.setText("It is "+players.get(5).getName()+" Round" ); 
                        this.msglbl.setForeground(players.get(5).getColor());
                        this.current=players.get(5);
                        break;
                }
             }
             phasethread();
             if(zero_round==this.player_number-1){
                 phase=-1;
                 round=-1;
                 zero_round++;
             }
             repaint();
    }//GEN-LAST:event_nextroundbtnActionPerformed

    private void EgyptbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EgyptbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_EgyptbtnActionPerformed

    private void NorthAfricabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthAfricabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_NorthAfricabtnActionPerformed

    private void GreatBritainbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreatBritainbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_GreatBritainbtnActionPerformed

    private void NORTHWEST_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NORTHWEST_BTNActionPerformed
       selectorop(evt);
    }//GEN-LAST:event_NORTHWEST_BTNActionPerformed

    private void ALASKABTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALASKABTNActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_ALASKABTNActionPerformed

    private void ALBERTABTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALBERTABTNActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_ALBERTABTNActionPerformed

    private void OntariobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OntariobtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_OntariobtnActionPerformed

    private void QuebecbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuebecbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_QuebecbtnActionPerformed

    private void EasternUSbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EasternUSbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_EasternUSbtnActionPerformed

    private void CentralAmericabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentralAmericabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_CentralAmericabtnActionPerformed

    private void VenezuelabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenezuelabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_VenezuelabtnActionPerformed

    private void BrazilbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrazilbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_BrazilbtnActionPerformed

    private void PerubtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PerubtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_PerubtnActionPerformed

    private void ArgentinabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArgentinabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_ArgentinabtnActionPerformed

    private void EastAfricabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EastAfricabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_EastAfricabtnActionPerformed

    private void congobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_congobtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_congobtnActionPerformed

    private void SouthAfricabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthAfricabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_SouthAfricabtnActionPerformed

    private void MadagascerbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MadagascerbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_MadagascerbtnActionPerformed

    private void IndonesiabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndonesiabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_IndonesiabtnActionPerformed

    private void NewGuineabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGuineabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_NewGuineabtnActionPerformed

    private void WestrenAustraliabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WestrenAustraliabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_WestrenAustraliabtnActionPerformed

    private void EasternAustraliabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EasternAustraliabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_EasternAustraliabtnActionPerformed

    private void IcelandbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IcelandbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_IcelandbtnActionPerformed

    private void ScandinaviabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScandinaviabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_ScandinaviabtnActionPerformed

    private void UkrainebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UkrainebtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_UkrainebtnActionPerformed

    private void NorthernEuropebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NorthernEuropebtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_NorthernEuropebtnActionPerformed

    private void WesternEuropebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WesternEuropebtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_WesternEuropebtnActionPerformed

    private void SouthernEuropebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SouthernEuropebtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_SouthernEuropebtnActionPerformed

    private void MiddleEastbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddleEastbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_MiddleEastbtnActionPerformed

    private void AfganistanbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AfganistanbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_AfganistanbtnActionPerformed

    private void UralbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UralbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_UralbtnActionPerformed

    private void SiberiabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiberiabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_SiberiabtnActionPerformed

    private void YakutskbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YakutskbtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_YakutskbtnActionPerformed

    private void KamchatkabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KamchatkabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_KamchatkabtnActionPerformed

    private void MongoliabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MongoliabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_MongoliabtnActionPerformed

    private void SiambtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiambtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_SiambtnActionPerformed

    private void IndiabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IndiabtnActionPerformed
        selectorop(evt);
    }//GEN-LAST:event_IndiabtnActionPerformed

    private void solders_scrlbar_depAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_solders_scrlbar_depAdjustmentValueChanged
         dep_scrl_value=evt.getValue();
         soldersserial.setText(dep_scrl_value+"");
    }//GEN-LAST:event_solders_scrlbar_depAdjustmentValueChanged

    private void solders_scrlbar_attAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_solders_scrlbar_attAdjustmentValueChanged
        this.solders_scrlbar_att.setMinimum(0);
        this.solders_scrlbar_att.setMaximum(select1.getNo_of_soldiers()-1);
       repaint();
        att_scrl_value=evt.getValue();
         soldersserial1.setText(att_scrl_value+"");
    }//GEN-LAST:event_solders_scrlbar_attAdjustmentValueChanged

    private void solders_scrlbar_renAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_solders_scrlbar_renAdjustmentValueChanged
        this.solders_scrlbar_ren.setMinimum(0);
        this.solders_scrlbar_ren.setMaximum(select1.getNo_of_soldiers()-1);
       repaint();
        ren_scrl_value=evt.getValue();
         soldersserial2.setText(ren_scrl_value+"");
    }//GEN-LAST:event_solders_scrlbar_renAdjustmentValueChanged

    private void deplymentok2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deplymentok2ActionPerformed
        if(select1==null){
            
        }
        else{
        select1.SoldiersIncrease(dep_scrl_value);
        solders_scrlbar_dep.setMaximum(solders_scrlbar_dep.getMaximum()-dep_scrl_value);
        }
        repaint();
       // okDep();
    }//GEN-LAST:event_deplymentok2ActionPerformed

    private void attackingokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackingokActionPerformed
       Random rand =new Random();
        Adice1=rand.nextInt(6)+1;
        Adice2=rand.nextInt(6)+1;
        Adice3=rand.nextInt(6)+1;
        Ddice1=rand.nextInt(6)+1;
        Ddice2=rand.nextInt(6)+1;
        int x=0,y=0;
        /*for(int j=0;j<countries.size();j++){
            if(countries.get(j).getName().equals(target1))
                x=j;//x is the index of the attacker
         }
         if(countries.get(x).getNoOfSold()<=3)
            solders_scrlbar_att.setMaximum(countries.get(x).getNoOfSold());
         else 
            solders_scrlbar_att.setMaximum(3);*/
        attackingdice1.setText(Adice1+"");
        attackingdice2.setText(Adice2+"");
        attackingdice3.setText(Adice3+"");
        defendingdice1.setText(Ddice1+"");
        defendingdice2.setText(Ddice2+"");
        attack();
        repaint();
    }//GEN-LAST:event_attackingokActionPerformed

    private void renforcmentokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renforcmentokActionPerformed
 if(renforcment_counter==true){
            JOptionPane.showMessageDialog(rootPane, "you can only renforce on time");
        }
        else{
            if(select1!=null && select2!=null){
                select1.Soldiersdecrease(ren_scrl_value);
                select2.SoldiersIncrease(ren_scrl_value);
                renforcment_counter=true;
            }
        }
        repaint();
    }//GEN-LAST:event_renforcmentokActionPerformed
    
    /**
     * @param args the command line arguments
     */
    
//    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*    try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
*/
        /* Create and display the form */
 /*       java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                 intro f1=new intro();
                 f1.setVisible(true);
                TimeUnit.SECONDS.sleep(5);
                f1.dispose();
                new Game_frame().setVisible(true);
                
            }
        });
        
    }
*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ALASKA;
    private javax.swing.JButton ALASKABTN;
    private javax.swing.JLabel ALASKA_SERAIL;
    private javax.swing.JButton ALBERTABTN;
    private javax.swing.JLabel ALBETRA_SERIAL;
    private javax.swing.JLabel Afganistan;
    private javax.swing.JButton Afganistanbtn;
    private javax.swing.JLabel Afganistanserial;
    private javax.swing.JLabel Alberta;
    private javax.swing.JLabel Argentina;
    private javax.swing.JButton Argentinabtn;
    private javax.swing.JLabel Argentinaserial;
    private javax.swing.JLabel Brazil;
    private javax.swing.JButton Brazilbtn;
    private javax.swing.JLabel Brazilserial;
    private javax.swing.JLabel CentralAmerica;
    private javax.swing.JLabel CentralAmericaSerial;
    private javax.swing.JButton CentralAmericabtn;
    private javax.swing.JLabel China;
    private javax.swing.JButton Chinabtn;
    private javax.swing.JLabel Chinaserial;
    private javax.swing.JLabel EastAfrica;
    private javax.swing.JButton EastAfricabtn;
    private javax.swing.JLabel EastAfricaserial;
    private javax.swing.JLabel EasternAustralia;
    private javax.swing.JButton EasternAustraliabtn;
    private javax.swing.JLabel EasternAustraliaserial;
    private javax.swing.JLabel EasternUS;
    private javax.swing.JButton EasternUSbtn;
    private javax.swing.JLabel EasternUSserial;
    private javax.swing.JLabel Egypt;
    private javax.swing.JButton Egyptbtn;
    private javax.swing.JLabel Egyptserial;
    private javax.swing.JLabel GreatBritain;
    private javax.swing.JButton GreatBritainbtn;
    private javax.swing.JLabel GreatBritainserial;
    private javax.swing.JLabel Greenland;
    private javax.swing.JLabel Greenland_serial;
    private javax.swing.JButton Greenlandbtn;
    private javax.swing.JLabel Iceland;
    private javax.swing.JButton Icelandbtn;
    private javax.swing.JLabel Icelandserial;
    private javax.swing.JLabel India;
    private javax.swing.JButton Indiabtn;
    private javax.swing.JLabel Indiaserial;
    private javax.swing.JLabel Indonesia;
    private javax.swing.JButton Indonesiabtn;
    private javax.swing.JLabel Indonesiaserial;
    private javax.swing.JLabel Irkutsk;
    private javax.swing.JButton Irkutskbtn;
    private javax.swing.JLabel Irkutskserial;
    private javax.swing.JLabel Japan;
    private javax.swing.JButton Japanbtn;
    private javax.swing.JLabel Japanserial;
    private javax.swing.JLabel Kamchatka;
    private javax.swing.JButton Kamchatkabtn;
    private javax.swing.JLabel Kamchatkaserial;
    private javax.swing.JLabel Madagascer;
    private javax.swing.JButton Madagascerbtn;
    private javax.swing.JLabel Madagascerserial;
    private javax.swing.JLabel MiddleEast;
    private javax.swing.JButton MiddleEastbtn;
    private javax.swing.JLabel MiddleEastserial;
    private javax.swing.JLabel Mongolia;
    private javax.swing.JButton Mongoliabtn;
    private javax.swing.JLabel Mongoliaserial;
    private javax.swing.JLabel NORTHWEST;
    private javax.swing.JButton NORTHWEST_BTN;
    private javax.swing.JLabel NORTHWEST_SERIAL;
    private javax.swing.JLabel NewGuinea;
    private javax.swing.JButton NewGuineabtn;
    private javax.swing.JLabel NewGuineaserial;
    private javax.swing.JLabel NorthAfrica;
    private javax.swing.JButton NorthAfricabtn;
    private javax.swing.JLabel NorthAfricaserial;
    private javax.swing.JLabel NorthernEurope;
    private javax.swing.JButton NorthernEuropebtn;
    private javax.swing.JLabel NorthernEuropeserial;
    private javax.swing.JLabel Ontario;
    private javax.swing.JButton Ontariobtn;
    private javax.swing.JLabel Ontarioserial;
    private javax.swing.JLabel Peru;
    private javax.swing.JButton Perubtn;
    private javax.swing.JLabel Peruserial;
    private javax.swing.JLabel Quebec;
    private javax.swing.JButton Quebecbtn;
    private javax.swing.JLabel Quebecserial;
    private javax.swing.JLabel SIBERIA;
    private javax.swing.JLabel SIBERIA_SERIAL;
    private javax.swing.JLabel Scandinavia;
    private javax.swing.JButton Scandinaviabtn;
    private javax.swing.JLabel Scandinaviaserial;
    private javax.swing.JLabel Siam;
    private javax.swing.JButton Siambtn;
    private javax.swing.JLabel Siamserial;
    private javax.swing.JButton Siberiabtn;
    private javax.swing.JLabel SouthAfrica;
    private javax.swing.JButton SouthAfricabtn;
    private javax.swing.JLabel SouthAfricaserial;
    private javax.swing.JLabel SouthernEurope;
    private javax.swing.JButton SouthernEuropebtn;
    private javax.swing.JLabel SouthernEuropeserial;
    private javax.swing.JLabel Ukraine;
    private javax.swing.JButton Ukrainebtn;
    private javax.swing.JLabel Ukraineserial;
    private javax.swing.JLabel Ural;
    private javax.swing.JButton Uralbtn;
    private javax.swing.JLabel Uralserial;
    private javax.swing.JLabel Venezuela;
    private javax.swing.JButton Venezuelabtn;
    private javax.swing.JLabel Venezuelaserial;
    private javax.swing.JLabel WesternEurope;
    private javax.swing.JButton WesternEuropebtn;
    private javax.swing.JLabel WesternEuropeserial;
    private javax.swing.JLabel WesternUS;
    private javax.swing.JLabel WesternUS_serial;
    private javax.swing.JButton WesternUSbtn;
    private javax.swing.JLabel WestrenAustralia;
    private javax.swing.JButton WestrenAustraliabtn;
    private javax.swing.JLabel WestrenAustraliaserial;
    private javax.swing.JLabel YAKUTSK;
    private javax.swing.JLabel YAKUTSK_SERIAL;
    private javax.swing.JButton Yakutskbtn;
    private javax.swing.JLabel attackingdice1;
    private javax.swing.JLabel attackingdice2;
    private javax.swing.JLabel attackingdice3;
    private javax.swing.JButton attackingok;
    private javax.swing.JPanel attackingpnl;
    private javax.swing.JLabel congo;
    private javax.swing.JButton congobtn;
    private javax.swing.JLabel congoserial;
    private javax.swing.JLabel defendingdice1;
    private javax.swing.JLabel defendingdice2;
    private javax.swing.JPanel deploymentpnl;
    private javax.swing.JButton deplymentok2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel map;
    private javax.swing.JLabel msglbl;
    private javax.swing.JPanel msgpnl;
    private javax.swing.JButton nextroundbtn;
    private javax.swing.JButton renforcmentok;
    private javax.swing.JPanel renforcmentpnl;
    private javax.swing.JScrollBar solders_scrlbar_att;
    private javax.swing.JScrollBar solders_scrlbar_dep;
    private javax.swing.JScrollBar solders_scrlbar_ren;
    private javax.swing.JLabel soldersserial;
    private javax.swing.JLabel soldersserial1;
    private javax.swing.JLabel soldersserial2;
    private javax.swing.JLabel target1lbl_att;
    private javax.swing.JLabel target1lbl_dep;
    private javax.swing.JLabel target1lbl_ren;
    private javax.swing.JLabel target1txt_att;
    private javax.swing.JLabel target1txt_dep;
    private javax.swing.JLabel target1txt_ren;
    private javax.swing.JLabel target2lbl_att;
    private javax.swing.JLabel target2lbl_ren;
    private javax.swing.JLabel target2txt_att;
    private javax.swing.JLabel target2txt_ren;
    // End of variables declaration//GEN-END:variables
}
   

public class main{
 public static void main(String args[]) throws InterruptedException {
     intro f1=new intro();
     Start start=new Start();
     f1.setExtendedState(JFrame.MAXIMIZED_BOTH);
    f1.setUndecorated(true);
      f1.setVisible(true);
    //  intro2 f2=new intro2();
     // f2.setExtendedState(JFrame.MAXIMIZED_BOTH);
    //f2.setUndecorated(true);
      TimeUnit.SECONDS.sleep(5);
      f1.dispose();
      //f2.setVisible(true);
     // Game_frame game=new Game_frame();
   //   game.setExtendedState(JFrame.MAXIMIZED_HORIZ);
     //TimeUnit.SECONDS.sleep(5);
     start.setExtendedState(JFrame.MAXIMIZED_BOTH);
 //   start.setUndecorated(true);
    //  f2.dispose();
      start.setVisible(true);
//     game.setVisible(true);
      
    }
}
  /*public void init(int i){//i is the number of player
        deploy();
        int j=0;
        while(j<i){
            players.get(j).setName(sc.nextLine());
        }
        /*while(){
            okDep(i);
        }
    }*/